#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

//#include "ray_payload.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 0, set = 1) uniform CameraProperties
{
  mat4 viewInverse;
  mat4 projInverse;
};

layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(location = 0) rayPayloadEXT vec3 ray;

void main()
{
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tmin = 0.001;
    float tmax = 10000.0;

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = viewInverse * vec4(0, 0, 0, 1);
    vec4 target = projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = viewInverse * vec4(normalize(target.xyz), 0);
    
    vec3 color = vec3(0);
    traceRayEXT(topLevelAS, 
            rayFlags, 
            0xff, 
            0 /*sbtRecordOffset*/, 
            0 /*sbtRecordStride*/,
            0 /*missIndex*/, 
            origin.xyz, tmin, 
            direction.xyz, tmax, 
            0 /*payload index*/);

    // if(ray.objectID != -1)
    // {
    //     color = materials.data[ray.objectID].albedo.rgb;
    // }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(ray, 1));
}