#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "ray_payload.glsl"
#include "random.glsl"

layout( push_constant ) uniform constants
{
	int32_t spp;
  int32_t current_batch;
} Batch;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 0, set = 1) uniform CameraProperties
{
  mat4 viewInverse;
  mat4 projInverse;
};

layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0, rgba32f) uniform image2D accumulation_image;
layout(location = 0) rayPayloadEXT RayPayload ray;

void main()
{
  vec3 acc = vec3(0);

  if(Batch.current_batch == 0)
  {
    imageStore(accumulation_image, ivec2(gl_LaunchIDEXT.xy), vec4(acc, 1));
  }

  uint rayFlags = gl_RayFlagsOpaqueEXT;
  float tmin = 0.001;
  float tmax = 1000.0;

  uint pixelSeed = rand_seed(rand_seed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), Batch.current_batch);
  ray.seed = pixelSeed;

  for(int s = 0; s < Batch.spp; ++s)
  {       
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(rand_float(pixelSeed), rand_float(pixelSeed));
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    d.y = -d.y;

    vec4 origin = viewInverse * vec4(0, 0, 0, 1);
    vec4 target = projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = viewInverse * vec4(normalize(target.xyz), 0);
    vec3 color = vec3(0);
    vec3 contribution = vec3(1);

    for(int i = 0; i < 32; ++i)
    {
      ray.hit = false;
      traceRayEXT(topLevelAS, 
              rayFlags, 
              0xff, 
              0 /*sbtRecordOffset*/, 
              0 /*sbtRecordStride*/,
              0 /*missIndex*/, 
              origin.xyz, tmin, 
              direction.xyz, tmax, 
              0 /*payload index*/);

      color += contribution * ray.direct;
      contribution *= ray.color.rgb;
      if(!ray.hit)
        break;

      // Russion roulette
      if(rand_float(pixelSeed) > dot(color, color) && i > 3)
        break;

      origin.xyz = ray.point + ray.w_out * 1e-4;
      direction.xyz = ray.w_out;
    }

    acc += color;
  }

  vec4 l = imageLoad(accumulation_image, ivec2(gl_LaunchIDEXT.xy));
  vec3 pixel = l.rgb + acc;
  imageStore(accumulation_image, ivec2(gl_LaunchIDEXT.xy), vec4(pixel, 1));

  int32_t current_sample_count = (Batch.current_batch + 1) * Batch.spp;
  vec3 out_color = pixel / float(current_sample_count);
  out_color = out_color / (1 + out_color);
  out_color = pow(out_color, 1.0 / vec3(2.2));
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(out_color, 1));
}