#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "material.glsl"
#include "scatter.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0, rgba32f) uniform image2D accImage;
layout(binding = 3, set = 0) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
} transforms;

layout(std430, push_constant) uniform PushConstants
{
    uint samplesPerFrame;
	uint currentSample;
	uint maxSampleCount;
	uint pad;

	vec2 apertureAndFocusDistance;
} camera;

layout(binding = 2, set = 1) buffer Materials { Material m[]; } materials;

layout(location = 0) rayPayloadEXT RayPayload ray;

void main() 
{
	if(camera.currentSample == 0)
	{
		imageStore(accImage, ivec2(gl_LaunchIDEXT.xy), vec4(0, 0, 0, 1));
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0, 0, 0, 1));
	}

	uint pixelSeed = rand_seed(rand_seed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), camera.currentSample);
	ray.seed = rand_seed(rand_seed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), camera.currentSample);

	vec3 pixelColor = vec3(0);

	for(int s = 0; s < camera.samplesPerFrame; s++)
	{
		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.x + rand_float(pixelSeed), gl_LaunchIDEXT.y + rand_float(pixelSeed));
		const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
		vec2 d = inUV * 2.0 - 1.0;

		vec2 offset = camera.apertureAndFocusDistance.x / 2 * rand_disk(ray.seed);
		vec3 origin = (transforms.view * vec4(offset,0,1)).xyz;
		vec3 target = (transforms.proj * vec4(d.x, d.y, 1, 1)).xyz ;
		vec3 direction = (transforms.view * vec4(normalize(target.xyz * camera.apertureAndFocusDistance.y - vec3(offset, 0)), 0)).xyz ;
		vec3 rayColor = vec3(0);
		vec3 coefficient = vec3(1);

		for(int b = 0; b < 10; b++)
		{
			uint rayFlags = gl_RayFlagsOpaqueEXT;
			uint cullMask = 0xff;
			float tmin = 0.001;
			float tmax = 10000.0;

			traceRayEXT(topLevelAS, 
					rayFlags, cullMask, 
					0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/,
					0 /*missIndex*/, 
					origin + direction, tmin, direction, tmax, 
					0 /*payload*/);

			if(ray.materialID == -1)
			{
				const vec3 d = normalize(direction);
				const float t = 0.5 * (d.y + 1.0);
				coefficient *= (1.0 - t) * vec3(.75) + t * vec3(0.5, 0.7, 1.0);
			}
			else
			{
				Material m = materials.m[ray.materialID];

				vec3 L = vec3(0);
				const vec2 Xi = vec2(rand_float(ray.seed), rand_float(ray.seed));
				const vec3 N = ray.N;
				sample_lambert_brdf( m, N, L, direction, Xi);
				const vec3 H = normalize(direction + L);

				const vec3 albedo = m.albedo.rgb;
				const vec3 diff = albedo;
				const vec3 F = fresnelSchlick(max(dot(H, direction), 0.), vec3(albedo));

				L = mix(reflect(direction, ray.N), L, m.properties.r);
				const vec3 c = mix(F, albedo, m.properties.r) * max(dot(L, N), 0);
				const float pdf = mix(1, M_1_PI, m.properties.r);

				origin += ray.t * direction;
				direction = L;

				coefficient *= c * pdf;
				coefficient += m.emission.rgb * m.emission.a;
			}

			// Trace missed, or end of trace.
			if (ray.materialID == -1)
			{			
				
				break;
			}

			float p = max(coefficient.x, max(coefficient.y, coefficient.z));
			if( p <= rand_float(ray.seed))
				break;

			coefficient *= 1. / p;
		}

		pixelColor += coefficient;
	}

	const bool shouldAccumulate = camera.currentSample < camera.maxSampleCount;
	const vec3 accColor = (shouldAccumulate ? imageLoad(accImage, ivec2(gl_LaunchIDEXT)).rgb + pixelColor : imageLoad(accImage, ivec2(gl_LaunchIDEXT)).rgb);

	pixelColor = accColor / (camera.currentSample + camera.samplesPerFrame);

	float exposure = 1.5;
	pixelColor *= exposure / (1. + pixelColor / exposure);

	imageStore(accImage, ivec2(gl_LaunchIDEXT.xy), vec4(accColor, 0));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pow(pixelColor, 1.0 / vec3(2.2)), 1.0));
}
